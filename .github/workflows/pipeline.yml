name: pipeline
on: push

env:
  RELEASE_FILE: RELEASE.txt

jobs:
  check:
    name: check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Build
      run: cargo build
    - name: Test
      run: cargo test
    - name: Scan
      run: |
        rustup component add clippy &&
        cargo clippy --all-targets --all-features -- -D warnings

  tag:
    if: github.ref == 'refs/heads/master'
    needs: check
    name: tag and release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Tag
      id: tag
      uses: anothrNick/github-tag-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: false
        RELEASE_BRANCHES: master
        DEFAULT_BUMP: patch
    - name: create release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag}}
        release_name: ${{ steps.tag.outputs.tag }}
        body: |
          Release ${{ steps.tag.outputs.tag }}.
        draft: true
        prerelease: true
    - run: printf ${{ steps.create_release.outputs.upload_url }} > ${{ env.RELEASE_FILE }}
    - name: Upload release data
      uses: actions/upload-artifact@v1.0.0
      with:
        name: RELEASE
        path: ${{ env.RELEASE_FILE }}

  publish-cratesio:
    needs: tag
    name: crates.io
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Get version
      id: get_version
      run: echo ::set-output name=VERSION::$(git tag --points-at HEAD --sort -version:refname | head -1)
    - name: Publish
      id: publish
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }} make update-version && 
        cargo login ${{ secrets.CRATES_IO_TOKEN }} && 
        cargo publish --allow-dirty

  x86_64-apple-darwin:
    needs: tag
    name: x86_64-apple-darwin
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v1
    - name: Get version
      id: get_version
      run: echo ::set-output name=VERSION::$(git tag --points-at HEAD --sort -version:refname | head -1)
    - name: Download release id
      uses: actions/download-artifact@v1.0.0
      with:
        name: RELEASE
    - name: Get release data
      id: get_release_data
      run: echo ::set-output name=upload_url::$(cat RELEASE/${{ env.RELEASE_FILE }})
    - name: install tools
      run: |
        rustup target install x86_64-apple-darwin
    - name: build-x86_64-apple-darwin
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }} make update-version && 
        cargo build --release --target "x86_64-apple-darwin"
    - name: zip
      run: cd ./target/x86_64-apple-darwin/release && tar -zcvf ../../../x86_64-apple-darwin.tar.gz complate
    - run: ls -alghR
    - name: upload-asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_data.outputs.upload_url }}
        asset_path: ./x86_64-apple-darwin.tar.gz
        asset_name: x86_64-apple-darwin.tar.gz
        asset_content_type: application/zip
